{"version":3,"sources":["store.js","components/PokemonInfo.jsx","components/PokemonFilter.jsx","components/PokemonRow.jsx","PokemonType.js","components/PokemonTable.jsx","App.js","serviceWorker.js","index.js"],"names":["useStore","create","set","filter","pokemon","selectedPokemon","setFilter","state","setPokemon","setSelectedPokemon","fetch","window","location","origin","then","resp","json","setState","PokemonInfo","name","english","Object","keys","base","map","key","Input","styled","input","PokemonFilter","type","value","onChange","evt","target","PokemonRow","PropTypes","shape","id","string","isRequired","japanese","chinese","french","arrayOf","HP","number","Attack","Defense","Speed","onClick","join","Button","variant","color","PokemonTable","width","toLocaleLowerCase","includes","slice","Title","h1","PageContainer","div","TwoColumnLayout","App","CssBaseline","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c76f8bf3.chunk.js","sourcesContent":["import create from \"zustand\";\r\n\r\nconst useStore = create((set) => ({\r\n  filter: \"\",\r\n  pokemon: [],\r\n  selectedPokemon: null,\r\n  setFilter: (filter) =>\r\n    set((state) => ({\r\n      ...state,\r\n      filter,\r\n    })),\r\n  setPokemon: (pokemon) =>\r\n    set((state) => ({\r\n      ...state,\r\n      pokemon,\r\n    })),\r\n  setSelectedPokemon: (selectedPokemon) =>\r\n    set((state) => ({\r\n      ...state,\r\n      selectedPokemon,\r\n    })),\r\n}));\r\n\r\nfetch(window.location.origin + \"/aizen-react-16/pokemon.json\")\r\n  .then((resp) => resp.json())\r\n  .then((pokemon) =>\r\n    useStore.setState((state) => ({\r\n      ...state,\r\n      pokemon,\r\n    }))\r\n  );\r\n\r\nexport default useStore;\r\n","import React from \"react\";\r\n\r\n// import PokemonType from \"../PokemonType\";\r\n\r\nimport useStore from \"../store\";\r\n\r\nconst PokemonInfo = () => {\r\n  const selectedPokemon = useStore((state) => state.selectedPokemon);\r\n\r\n  return selectedPokemon ? (\r\n    <div>\r\n      <h2>{selectedPokemon.name.english}</h2>\r\n      <table>\r\n        <tbody>\r\n          {Object.keys(selectedPokemon.base).map((key) => (\r\n            <tr key={key}>\r\n              <td>{key}</td>\r\n              <td>{selectedPokemon.base[key]}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\n// PokemonInfo.propTypes = PokemonType;\r\n\r\nexport default PokemonInfo;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nimport useStore from \"../store\";\r\n\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  padding: 0.2rem;\r\n  font-size: large;\r\n`;\r\n\r\nconst PokemonFilter = () => {\r\n  const filter = useStore((state) => state.filter);\r\n  const setFilter = useStore((state) => state.setFilter);\r\n\r\n  return (\r\n    <Input\r\n      type=\"text\"\r\n      value={filter}\r\n      onChange={(evt) => setFilter(evt.target.value)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PokemonFilter;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nimport PokemonType from \"../PokemonType\";\r\n\r\nconst PokemonRow = ({ pokemon, onClick }) =>(\r\n   <> \r\n    <tr key={pokemon.id}>\r\n      <td>{pokemon.name.english}</td>\r\n      <td>{pokemon.type.join(\", \")}</td>\r\n      <td>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => onClick(pokemon)}\r\n        >\r\n          More Information\r\n        </Button>\r\n      </td>\r\n    </tr>\r\n  </>\r\n  \r\n);\r\n\r\nPokemonRow.propTypes = {\r\n  pokemon: PropTypes.shape({PokemonType}),\r\n};\r\n\r\nexport default PokemonRow;","import PropTypes from \"prop-types\";\r\n\r\nconst PokemonType = PropTypes.shape({\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.shape({\r\n    english: PropTypes.string.isRequired,\r\n    japanese: PropTypes.string.isRequired,\r\n    chinese: PropTypes.string.isRequired,\r\n    french: PropTypes.string.isRequired,\r\n  }),\r\n  type: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  base: PropTypes.shape({\r\n    HP: PropTypes.number.isRequired,\r\n    Attack: PropTypes.number.isRequired,\r\n    Defense: PropTypes.number.isRequired,\r\n    \"Sp. Attack\": PropTypes.number.isRequired,\r\n    \"Sp. Defense\": PropTypes.number.isRequired,\r\n    Speed: PropTypes.number.isRequired,\r\n  }),\r\n});\r\n\r\nexport default PokemonType;\r\n","import React from \"react\";\r\n\r\nimport useStore from \"../store\";\r\n\r\nimport PokemonRow from \"./PokemonRow\";\r\n\r\nconst PokemonTable = () => {\r\n  const pokemon = useStore((state) => state.pokemon);\r\n  const filter = useStore((state) => state.filter);\r\n  const setSelectedPokemon = useStore((state) => state.setSelectedPokemon);\r\n\r\n  return (\r\n    <table width=\"100%\">\r\n      <tbody>\r\n        {pokemon\r\n          .filter(({ name: { english } }) =>\r\n            english.toLocaleLowerCase().includes(filter.toLocaleLowerCase())\r\n          )\r\n          .slice(0, 20)\r\n          .map((pokemon) => (\r\n            <PokemonRow\r\n              key={pokemon.id}\r\n              pokemon={pokemon}\r\n              // onClick={(pokemon) => selectedPokemonSet(pokemon)}\r\n              onClick={(pokemon) => setSelectedPokemon(pokemon)}\r\n            />\r\n          ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\nexport default PokemonTable;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { CssBaseline } from \"@material-ui/core\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport PokemonInfo from \"./components/PokemonInfo\";\r\nimport PokemonFilter from \"./components/PokemonFilter\";\r\nimport PokemonTable from \"./components/PokemonTable\";\r\n\r\nconst Title = styled.h1`\r\n  text-align: center;\r\n`;\r\nconst PageContainer = styled.div`\r\n  margin: auto;\r\n  width: 800px;\r\n  padding-top: 1em;\r\n`;\r\nconst TwoColumnLayout = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 80% 20%;\r\n  grid-column-gap: 1rem;\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <PageContainer>\r\n      <CssBaseline />\r\n      <Title>Pokemon Search</Title>\r\n      <TwoColumnLayout>\r\n        <div>\r\n          <PokemonFilter />\r\n          <PokemonTable />\r\n        </div>\r\n        {/* {selectedPokemon && <PokemonInfo />} */}\r\n        <PokemonInfo />\r\n      </TwoColumnLayout>\r\n    </PageContainer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}