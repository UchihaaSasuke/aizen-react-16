{"version":3,"sources":["store.js","components/PokemonInfo.jsx","components/PokemonFilter.jsx","components/PokemonRow.jsx","PokemonType.js","components/PokemonTable.jsx","App.js","serviceWorker.js","index.js"],"names":["store","filter","pokemon","selectedPokemon","makeObservable","this","observable","filteredPokemon","computed","name","english","toLocaleLowerCase","includes","fetch","window","location","origin","then","resp","json","setPokemon","observer","Object","keys","base","map","key","Input","styled","input","type","value","onChange","evt","setFilter","target","PokemonRow","PropTypes","shape","id","number","isRequired","string","japanese","chinese","french","arrayOf","HP","Attack","Defense","Speed","onClick","join","Button","variant","color","width","slice","setSelectedPokemon","Title","h1","PageContainer","div","TwoColumnLayout","App","CssBaseline","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.31cba5e6.chunk.js","sourcesContent":["import { makeObservable, observable, computed, autorun } from \"mobx\";\r\n\r\nclass Store {\r\n  filter = \"\";\r\n  pokemon = [];\r\n  selectedPokemon = null;\r\n\r\n  constructor() {\r\n    makeObservable(this, {\r\n      filter: observable,\r\n      pokemon: observable,\r\n      selectedPokemon: observable,\r\n      filteredPokemon: computed,\r\n    });\r\n  }\r\n\r\n  get filteredPokemon() {\r\n    return this.pokemon.filter(({ name: { english } }) =>\r\n      english.toLocaleLowerCase().includes(this.filter.toLocaleLowerCase())\r\n    );\r\n  }\r\n\r\n  setPokemon(pokemon) {\r\n    this.pokemon = pokemon;\r\n  }\r\n  setFilter(filter) {\r\n    this.filter = filter;\r\n  }\r\n  setSelectedPokemon(selectedPokemon) {\r\n    this.selectedPokemon = selectedPokemon;\r\n  }\r\n}\r\n\r\nconst store = new Store();\r\n\r\nfetch(window.location.origin + \"/aizen-react-16/pokemon.json\")\r\n  .then((resp) => resp.json())\r\n  .then((pokemon) => store.setPokemon(pokemon));\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n// import PokemonType from \"../PokemonType\";\r\n\r\nimport store from \"../store\";\r\n\r\nconst PokemonInfo = () => {\r\n  return store.selectedPokemon ? (\r\n    <div>\r\n      <h2>{store.selectedPokemon.name.english}</h2>\r\n      <table>\r\n        <tbody>\r\n          {Object.keys(store.selectedPokemon.base).map((key) => (\r\n            <tr key={key}>\r\n              <td>{key}</td>\r\n              <td>{store.selectedPokemon.base[key]}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\n// PokemonInfo.propTypes = PokemonType;\r\n\r\nexport default observer(PokemonInfo);\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport store from \"../store\";\r\n\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  padding: 0.2rem;\r\n  font-size: large;\r\n`;\r\n\r\nconst PokemonFilter = () => (\r\n  <Input\r\n    type=\"text\"\r\n    value={store.filter}\r\n    onChange={(evt) => store.setFilter(evt.target.value)}\r\n  />\r\n);\r\n\r\nexport default observer(PokemonFilter);\r\n","import React from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nimport PokemonType from \"../PokemonType\";\r\n\r\nconst PokemonRow = ({ pokemon, onClick }) => (\r\n  <>\r\n    <tr>\r\n      <td>{pokemon.name.english}</td>\r\n      <td>{pokemon.type.join(\", \")}</td>\r\n      <td>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => onClick(pokemon)}\r\n        >\r\n          More Information\r\n        </Button>\r\n      </td>\r\n    </tr>\r\n  </>\r\n);\r\n\r\nPokemonRow.propTypes = {\r\n  pokemon: PokemonType,\r\n};\r\n\r\nexport default PokemonRow;\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst PokemonType = PropTypes.shape({\r\n  id: PropTypes.number.isRequired,\r\n  name: PropTypes.shape({\r\n    english: PropTypes.string.isRequired,\r\n    japanese: PropTypes.string.isRequired,\r\n    chinese: PropTypes.string.isRequired,\r\n    french: PropTypes.string.isRequired,\r\n  }),\r\n  type: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  base: PropTypes.shape({\r\n    HP: PropTypes.number.isRequired,\r\n    Attack: PropTypes.number.isRequired,\r\n    Defense: PropTypes.number.isRequired,\r\n    \"Sp. Attack\": PropTypes.number.isRequired,\r\n    \"Sp. Defense\": PropTypes.number.isRequired,\r\n    Speed: PropTypes.number.isRequired,\r\n  }),\r\n});\r\n\r\nexport default PokemonType;\r\n","import React from \"react\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nimport store from \"../store\";\r\n\r\nimport PokemonRow from \"./PokemonRow\";\r\n\r\nconst PokemonTable = () => {\r\n  return (\r\n    <table width=\"100%\">\r\n      <tbody>\r\n        {store.filteredPokemon.slice(0, 20).map((pokemon) => (\r\n          <PokemonRow\r\n            key={pokemon.id}\r\n            pokemon={pokemon}\r\n            onClick={(pokemon) => store.setSelectedPokemon(pokemon)}\r\n          />\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\nexport default observer(PokemonTable);\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { CssBaseline } from \"@material-ui/core\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport PokemonInfo from \"./components/PokemonInfo\";\r\nimport PokemonFilter from \"./components/PokemonFilter\";\r\nimport PokemonTable from \"./components/PokemonTable\";\r\n\r\nconst Title = styled.h1`\r\n  text-align: center;\r\n`;\r\nconst PageContainer = styled.div`\r\n  margin: auto;\r\n  width: 800px;\r\n  padding-top: 1em;\r\n`;\r\nconst TwoColumnLayout = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 80% 20%;\r\n  grid-column-gap: 1rem;\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <PageContainer>\r\n      <CssBaseline />\r\n      <Title>Pokemon Search</Title>\r\n      <TwoColumnLayout>\r\n        <div>\r\n          <PokemonFilter />\r\n          <PokemonTable />\r\n        </div>\r\n        {/* {selectedPokemon && <PokemonInfo />} */}\r\n        <PokemonInfo />\r\n      </TwoColumnLayout>\r\n    </PageContainer>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}